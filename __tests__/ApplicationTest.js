import App from "../src/App.js";
import { MissionUtils } from "@woowacourse/mission-utils";
import Lotto from "../src/Lotto.js";

const mockQuestions = (inputs) => {
  MissionUtils.Console.readLineAsync = jest.fn();

  MissionUtils.Console.readLineAsync.mockImplementation(() => {
    const input = inputs.shift();

    return Promise.resolve(input);
  });
};

const mockRandoms = (numbers) => {
  MissionUtils.Random.pickUniqueNumbersInRange = jest.fn();
  numbers.reduce((acc, number) => {
    return acc.mockReturnValueOnce(number);
  }, MissionUtils.Random.pickUniqueNumbersInRange);
};

const getLogSpy = () => {
  const logSpy = jest.spyOn(MissionUtils.Console, "print");
  logSpy.mockClear();
  return logSpy;
};

const runException = async (input) => {
  // given
  const logSpy = getLogSpy();

  const RANDOM_NUMBERS_TO_END = [1, 2, 3, 4, 5, 6];
  const INPUT_NUMBERS_TO_END = ["1000", "1,2,3,4,5,6", "7"];

  mockRandoms([RANDOM_NUMBERS_TO_END]);
  mockQuestions([input, ...INPUT_NUMBERS_TO_END]);

  // when
  const app = new App();
  await app.run();

  // then
  expect(logSpy).toHaveBeenCalledWith(expect.stringContaining("[ERROR]"));
};

describe("로또 테스트", () => {
  beforeEach(() => {
    jest.restoreAllMocks();
  });

  test("기능 테스트", async () => {
    // given
    const logSpy = getLogSpy();

    mockRandoms([
      [8, 21, 23, 41, 42, 43],
      [3, 5, 11, 16, 32, 38],
      [7, 11, 16, 35, 36, 44],
      [1, 8, 11, 31, 41, 42],
      [13, 14, 16, 38, 42, 45],
      [7, 11, 30, 40, 42, 43],
      [2, 13, 22, 32, 38, 45],
      [1, 3, 5, 14, 22, 45],
    ]);
    mockQuestions(["8000", "1,2,3,4,5,6", "7"]);

    // when
    const app = new App();
    await app.run();

    // then
    const logs = [
      "8개를 구매했습니다.",
      "[8, 21, 23, 41, 42, 43]",
      "[3, 5, 11, 16, 32, 38]",
      "[7, 11, 16, 35, 36, 44]",
      "[1, 8, 11, 31, 41, 42]",
      "[13, 14, 16, 38, 42, 45]",
      "[7, 11, 30, 40, 42, 43]",
      "[2, 13, 22, 32, 38, 45]",
      "[1, 3, 5, 14, 22, 45]",
      "3개 일치 (5,000원) - 1개",
      "4개 일치 (50,000원) - 0개",
      "5개 일치 (1,500,000원) - 0개",
      "5개 일치, 보너스 볼 일치 (30,000,000원) - 0개",
      "6개 일치 (2,000,000,000원) - 0개",
      "총 수익률은 62.5%입니다.",
    ];

    logs.forEach((log) => {
      expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(log));
    });
  });

  test("기능 테스트 2", async () => {
    // given
    const logSpy = getLogSpy();

    mockRandoms([
      [1, 2, 18, 24, 27, 35],
      [11, 16, 23, 25, 33, 42],
      [4, 7, 20, 23, 27, 42],
      [1, 2, 18, 29, 37, 41],
      [1, 5, 9, 29, 30, 36],
      [7, 12, 21, 30, 38, 41],
      [4, 12, 21, 26, 31, 43],
      [7, 21, 30, 31, 33, 43],
      [4, 6, 11, 14, 25, 35],
      [5, 6, 9, 10, 26, 36],
      [1, 2, 6, 13, 20, 44],
      [1, 2, 16, 28, 42, 44],
      [5, 9, 27, 34, 41, 42],
      [8, 16, 28, 29, 35, 44],
      [1, 6, 11, 12, 14, 16],
      [2, 4, 12, 24, 26, 32],
      [3, 10, 16, 20, 35, 36],
      [1, 2, 19, 21, 31, 38],
      [4, 6, 8, 10, 31, 36],
      [1, 2, 6, 36, 37, 45],
      [4, 6, 8, 19, 23, 42],
      [1, 2, 22, 24, 27, 33],
      [1, 2, 9, 11, 29, 45],
      [8, 11, 15, 31, 36, 41],
      [2, 13, 17, 18, 24, 26],
      [7, 11, 15, 29, 38, 39],
      [1, 25, 28, 29, 37, 41],
      [1, 12, 15, 23, 42, 44],
      [1, 2, 22, 35, 36, 39],
      [7, 11, 17, 25, 36, 45],
      [11, 13, 17, 24, 30, 43],
      [2, 7, 13, 15, 21, 37],
      [1, 6, 10, 24, 32, 42],
      [4, 11, 12, 17, 35, 39],
      [3, 5, 13, 17, 29, 45],
      [4, 15, 17, 22, 25, 34],
      [1, 3, 24, 40, 41, 43],
      [1, 5, 8, 16, 25, 32],
      [1, 7, 9, 14, 22, 28],
      [7, 14, 18, 28, 29, 41],
      [2, 3, 8, 20, 25, 43],
      [3, 7, 9, 12, 37, 42],
      [6, 10, 13, 31, 36, 43],
      [1, 7, 9, 17, 32, 40],
      [1, 2, 9, 14, 16, 41],
      [1, 2, 19, 20, 42, 44],
      [16, 18, 34, 36, 38, 40],
      [1, 5, 6, 35, 38, 41],
      [7, 16, 29, 31, 32, 41],
      [13, 25, 38, 39, 42, 43],
      [6, 8, 15, 17, 29, 45],
      [2, 3, 13, 18, 23, 28],
      [8, 11, 15, 20, 35, 37],
      [5, 7, 12, 36, 37, 42],
      [1, 8, 13, 30, 32, 39],
      [2, 3, 6, 9, 24, 26],
      [1, 5, 8, 39, 42, 43],
      [5, 14, 20, 21, 26, 38],
      [7, 10, 11, 14, 28, 31],
      [13, 17, 25, 38, 40, 44],
      [3, 10, 11, 13, 22, 34],
      [2, 4, 16, 31, 39, 44],
      [12, 14, 21, 27, 32, 44],
      [3, 4, 12, 35, 39, 44],
      [15, 20, 22, 24, 25, 32],
      [7, 12, 13, 27, 29, 43],
      [1, 2, 19, 22, 26, 45],
      [7, 11, 16, 29, 33, 44],
      [2, 13, 23, 24, 36, 44],
      [5, 14, 16, 35, 41, 43],
      [1, 2, 13, 30, 40, 41],
      [3, 4, 15, 18, 29, 41],
      [9, 14, 17, 20, 43, 45],
      [13, 22, 27, 30, 43, 44],
      [3, 15, 29, 33, 34, 40],
      [3, 9, 27, 28, 38, 39],
      [1, 17, 19, 27, 36, 45],
      [1, 2, 15, 16, 27, 38],
      [1, 8, 9, 27, 31, 43],
      [7, 29, 36, 40, 43, 45],
      [5, 15, 25, 41, 42, 43],
      [11, 15, 16, 20, 28, 29],
      [13, 14, 17, 18, 21, 45],
      [3, 16, 20, 33, 38, 40],
      [7, 8, 12, 17, 38, 44],
      [4, 6, 13, 15, 17, 24],
      [17, 22, 32, 38, 41, 43],
      [1, 16, 27, 35, 37, 45],
      [12, 16, 18, 38, 42, 45],
      [4, 10, 16, 20, 21, 38],
      [5, 7, 13, 20, 26, 42],
      [1, 6, 12, 20, 30, 44],
      [9, 10, 12, 14, 29, 45],
      [4, 5, 15, 19, 20, 37],
      [2, 14, 17, 18, 36, 45],
      [12, 19, 26, 38, 39, 41],
      [1, 2, 9, 15, 34, 40],
      [2, 9, 16, 18, 23, 25],
      [3, 8, 15, 19, 27, 44],
      [8, 20, 23, 30, 37, 42]
    ]);
    mockQuestions(["100000", "1,8,19,20,43,45", "29"]);

    // when
    const app = new App();
    await app.run();

    // then
    const logs = [
      "100개를 구매했습니다.",
      "[1, 2, 18, 24, 27, 35]",
      "[11, 16, 23, 25, 33, 42]",
      "[4, 7, 20, 23, 27, 42]",
      "[1, 2, 18, 29, 37, 41]",
      "[1, 5, 9, 29, 30, 36]",
      "[7, 12, 21, 30, 38, 41]",
      "[4, 12, 21, 26, 31, 43]",
      "[7, 21, 30, 31, 33, 43]",
      "[4, 6, 11, 14, 25, 35]",
      "[5, 6, 9, 10, 26, 36]",
      "[1, 2, 6, 13, 20, 44]",
      "[1, 2, 16, 28, 42, 44]",
      "[5, 9, 27, 34, 41, 42]",
      "[8, 16, 28, 29, 35, 44]",
      "[1, 6, 11, 12, 14, 16]",
      "[2, 4, 12, 24, 26, 32]",
      "[3, 10, 16, 20, 35, 36]",
      "[1, 2, 19, 21, 31, 38]",
      "[4, 6, 8, 10, 31, 36]",
      "[1, 2, 6, 36, 37, 45]",
      "[4, 6, 8, 19, 23, 42]",
      "[1, 2, 22, 24, 27, 33]",
      "[1, 2, 9, 11, 29, 45]",
      "[8, 11, 15, 31, 36, 41]",
      "[2, 13, 17, 18, 24, 26]",
      "[7, 11, 15, 29, 38, 39]",
      "[1, 25, 28, 29, 37, 41]",
      "[1, 12, 15, 23, 42, 44]",
      "[1, 2, 22, 35, 36, 39]",
      "[7, 11, 17, 25, 36, 45]",
      "[11, 13, 17, 24, 30, 43]",
      "[2, 7, 13, 15, 21, 37]",
      "[1, 6, 10, 24, 32, 42]",
      "[4, 11, 12, 17, 35, 39]",
      "[3, 5, 13, 17, 29, 45]",
      "[4, 15, 17, 22, 25, 34]",
      "[1, 3, 24, 40, 41, 43]",
      "[1, 5, 8, 16, 25, 32]",
      "[1, 7, 9, 14, 22, 28]",
      "[7, 14, 18, 28, 29, 41]",
      "[2, 3, 8, 20, 25, 43]",
      "[3, 7, 9, 12, 37, 42]",
      "[6, 10, 13, 31, 36, 43]",
      "[1, 7, 9, 17, 32, 40]",
      "[1, 2, 9, 14, 16, 41]",
      "[1, 2, 19, 20, 42, 44]",
      "[16, 18, 34, 36, 38, 40]",
      "[1, 5, 6, 35, 38, 41]",
      "[7, 16, 29, 31, 32, 41]",
      "[13, 25, 38, 39, 42, 43]",
      "[6, 8, 15, 17, 29, 45]",
      "[2, 3, 13, 18, 23, 28]",
      "[8, 11, 15, 20, 35, 37]",
      "[5, 7, 12, 36, 37, 42]",
      "[1, 8, 13, 30, 32, 39]",
      "[2, 3, 6, 9, 24, 26]",
      "[1, 5, 8, 39, 42, 43]",
      "[5, 14, 20, 21, 26, 38]",
      "[7, 10, 11, 14, 28, 31]",
      "[13, 17, 25, 38, 40, 44]",
      "[3, 10, 11, 13, 22, 34]",
      "[2, 4, 16, 31, 39, 44]",
      "[12, 14, 21, 27, 32, 44]",
      "[3, 4, 12, 35, 39, 44]",
      "[15, 20, 22, 24, 25, 32]",
      "[7, 12, 13, 27, 29, 43]",
      "[1, 2, 19, 22, 26, 45]",
      "[7, 11, 16, 29, 33, 44]",
      "[2, 13, 23, 24, 36, 44]",
      "[5, 14, 16, 35, 41, 43]",
      "[1, 2, 13, 30, 40, 41]",
      "[3, 4, 15, 18, 29, 41]",
      "[9, 14, 17, 20, 43, 45]",
      "[13, 22, 27, 30, 43, 44]",
      "[3, 15, 29, 33, 34, 40]",
      "[3, 9, 27, 28, 38, 39]",
      "[1, 17, 19, 27, 36, 45]",
      "[1, 2, 15, 16, 27, 38]",
      "[1, 8, 9, 27, 31, 43]",
      "[7, 29, 36, 40, 43, 45]",
      "[5, 15, 25, 41, 42, 43]",
      "[11, 15, 16, 20, 28, 29]",
      "[13, 14, 17, 18, 21, 45]",
      "[3, 16, 20, 33, 38, 40]",
      "[7, 8, 12, 17, 38, 44]",
      "[4, 6, 13, 15, 17, 24]",
      "[17, 22, 32, 38, 41, 43]",
      "[1, 16, 27, 35, 37, 45]",
      "[12, 16, 18, 38, 42, 45]",
      "[4, 10, 16, 20, 21, 38]",
      "[5, 7, 13, 20, 26, 42]",
      "[1, 6, 12, 20, 30, 44]",
      "[9, 10, 12, 14, 29, 45]",
      "[4, 5, 15, 19, 20, 37]",
      "[2, 14, 17, 18, 36, 45]",
      "[12, 19, 26, 38, 39, 41]",
      "[1, 2, 9, 15, 34, 40]",
      "[2, 9, 16, 18, 23, 25]",
      "[3, 8, 15, 19, 27, 44]",
      "[8, 20, 23, 30, 37, 42]",
      "3개 일치 (5,000원) - 7개",
      "4개 일치 (50,000원) - 0개",
      "5개 일치 (1,500,000원) - 0개",
      "5개 일치, 보너스 볼 일치 (30,000,000원) - 0개",
      "6개 일치 (2,000,000,000원) - 0개",
      "총 수익률은 35.0%입니다.",
    ];

    logs.forEach((log) => {
      expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(log));
    });
  });

  test("기능 테스트 3", async () => {
    // given
    const logSpy = getLogSpy();

    mockRandoms([
      [8, 21, 23, 41, 42, 43],
    ]);
    mockQuestions(["1000", "8,21,23,41,42,43", "45"]);

    // when
    const app = new App();
    await app.run();

    // then
    const logs = [
      "1개를 구매했습니다.",
      "[8, 21, 23, 41, 42, 43]",
      "3개 일치 (5,000원) - 0개",
      "4개 일치 (50,000원) - 0개",
      "5개 일치 (1,500,000원) - 0개",
      "5개 일치, 보너스 볼 일치 (30,000,000원) - 0개",
      "6개 일치 (2,000,000,000원) - 1개",
      "총 수익률은 200,000,000.0%입니다.",
    ];

    logs.forEach((log) => {
      expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(log));
    });
  });

  test("예외 테스트", async () => {
    await runException("1000j");
  });

  test("예외 테스트 2", async () => {
    await runException("-1");
  });
});

describe("단위 테스트", () => {
  beforeEach(() => {
    jest.restoreAllMocks();
  });

  test("calculatePurchaseCount 테스트", () => {
    const app = new App();
    expect(app.calculatePurchaseCount(3000)).toBe(3);
  });

  test("calculatePurchaseCount 예외 테스트", () => {
    const app = new App();
    expect(() => app.calculatePurchaseCount(3100)).toThrow("[ERROR]");
  });

  test("generateLottos 테스트", async () => {
    // given
    const logSpy = getLogSpy();

    mockRandoms([
      [8, 21, 23, 41, 42, 43],
      [3, 5, 11, 16, 32, 38],
    ]);

    // when
    const app = new App();
    app.generateLottos(2)

    // then
    const logs = [
      "[8, 21, 23, 41, 42, 43]",
      "[3, 5, 11, 16, 32, 38]"
    ];

    logs.forEach((log) => {
      expect(logSpy).toHaveBeenCalledWith(expect.stringContaining(log));
    });
  });

  test("calculateLottoResults 테스트", () => {
    const app = new App();

    const generatedLottos = [new Lotto([8, 21, 23, 41, 42, 43]), new Lotto([3, 5, 11, 16, 32, 38])];
    const winningNumbers = [8, 21, 23, 38, 41, 42];
    const bonusNumber = 43;
    const purchaseAmount = 2;

    const result = {
      3: 0,
      4: 0,
      5: 0,
      5.5: 1,
      6: 0,
      totalPrize: 30000000,
      profitRate: "1,500,000,000.0",
    };

    expect(app.calculateLottoResults(generatedLottos, winningNumbers, bonusNumber, purchaseAmount)).toEqual(result);
  });
});